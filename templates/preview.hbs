<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Template Preview - HTML to Image Service (DarkhorseOne Ltd.)</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'PingFang SC', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .container {
            width: 100%;
            max-width: 1400px;
            height: calc(100vh - 40px);
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            overflow: hidden;
            display: flex;
            flex-direction: column;
        }
        
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 25px 40px;
            flex-shrink: 0;
        }
        
        .header h1 {
            font-size: 28px;
            font-weight: 600;
            margin-bottom: 8px;
        }
        
        .header p {
            opacity: 0.9;
            font-size: 14px;
        }
        
        .main {
            display: flex;
            flex: 1;
            overflow: hidden;
        }
        
        .sidebar {
            width: 400px;
            background: #f7f8fa;
            padding: 30px;
            border-right: 1px solid #e5e7eb;
            overflow-y: auto;
            flex-shrink: 0;
        }
        
        .section {
            margin-bottom: 25px;
        }
        
        .section-title {
            font-size: 12px;
            font-weight: 600;
            color: #6b7280;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 10px;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            font-size: 14px;
            font-weight: 500;
            color: #374151;
            margin-bottom: 6px;
        }
        
        .form-group select,
        .form-group input,
        .form-group textarea {
            width: 100%;
            padding: 10px 12px;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.2s;
        }
        
        .form-group select:focus,
        .form-group input:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }
        
        .form-group textarea {
            min-height: 100px;
            resize: vertical;
            font-family: inherit;
        }
        
        .preset-buttons {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
            margin-top: 8px;
        }
        
        .preset-btn {
            padding: 6px 12px;
            background: white;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            font-size: 12px;
            color: #4b5563;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .preset-btn:hover {
            background: #f3f4f6;
            border-color: #9ca3af;
        }
        
        .preset-btn.active {
            background: #667eea;
            color: white;
            border-color: #667eea;
        }
        
        .btn-primary {
            width: 100%;
            padding: 12px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: transform 0.2s, box-shadow 0.2s;
        }
        
        .btn-primary:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
        }
        
        .btn-primary:active {
            transform: translateY(0);
        }
        
        .preview-area {
            flex: 1;
            padding: 40px;
            display: flex;
            flex-direction: column;
            background: #fafbfc;
            overflow: auto;
        }
        
        .preview-header {
            width: 100%;
            margin-bottom: 20px;
            text-align: center;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .preview-info {
            display: inline-flex;
            gap: 20px;
            padding: 8px 16px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            font-size: 13px;
            color: #6b7280;
        }
        
        .preview-info span {
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        .preview-container {
            position: relative;
            background: white;
            border-radius: 12px;
            box-shadow: 0 10px 40px rgba(0,0,0,0.1);
            overflow: hidden;
            max-width: 100%;
            max-height: 600px;
        }
        
        #htmlPreviewContainer {
            width: 100%;
            height: calc(100vh - 200px);
            max-height: 800px;
            min-height: 400px;
            position: relative;
            overflow: auto;
            display: flex;
            align-items: center;
            justify-content: center;
            background: #f3f4f6;
            padding: 20px;
            box-sizing: border-box;
        }
        
        .iframe-wrapper {
            transform-origin: center center;
            transition: transform 0.3s ease;
            background: white;
            box-shadow: 0 10px 40px rgba(0,0,0,0.1);
            position: relative;
            flex-shrink: 0;
        }
        
        #htmlPreviewContainer .preview-iframe {
            border: none;
            background: white;
        }
        
        .preview-image {
            display: block;
            max-width: 100%;
            max-height: 600px;
            width: auto;
            height: auto;
        }
        
        .loading {
            display: none;
            text-align: center;
            padding: 40px;
        }
        
        .loading.active {
            display: block;
        }
        
        .spinner {
            display: inline-block;
            width: 40px;
            height: 40px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .empty-state {
            text-align: center;
            color: #9ca3af;
        }
        
        .empty-state svg {
            width: 120px;
            height: 120px;
            margin-bottom: 20px;
            opacity: 0.3;
        }
        
        .empty-state p {
            font-size: 14px;
        }
        
        .advanced-options {
            border-top: 1px solid #e5e7eb;
            padding-top: 20px;
            margin-top: 20px;
        }
        
        .row {
            display: flex;
            gap: 12px;
        }
        
        .row .form-group {
            flex: 1;
        }
        
        .help-text {
            font-size: 12px;
            color: #9ca3af;
            margin-top: 4px;
        }
        
        .template-badge {
            display: inline-block;
            padding: 2px 8px;
            background: #f3f4f6;
            border-radius: 4px;
            font-size: 11px;
            color: #6b7280;
            margin-left: 8px;
        }
        
        /* Checkbox switch styles */
        .switch-group {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 12px 16px;
            background: white;
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            margin-bottom: 15px;
        }
        
        .switch {
            position: relative;
            display: inline-block;
            width: 44px;
            height: 24px;
        }
        
        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }
        
        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #cbd5e1;
            transition: .3s;
            border-radius: 24px;
        }
        
        .slider:before {
            position: absolute;
            content: "";
            height: 18px;
            width: 18px;
            left: 3px;
            bottom: 3px;
            background-color: white;
            transition: .3s;
            border-radius: 50%;
        }
        
        input:checked + .slider {
            background-color: #667eea;
        }
        
        input:focus + .slider {
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.2);
        }
        
        input:checked + .slider:before {
            transform: translateX(20px);
        }
        
        .switch-label {
            font-size: 14px;
            font-weight: 500;
            color: #374151;
            flex: 1;
        }
        
        .preview-mode-toggle {
            display: flex;
            gap: 0;
            background: white;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            overflow: hidden;
            margin-bottom: 20px;
        }
        
        .preview-mode-btn {
            flex: 1;
            padding: 10px;
            background: transparent;
            border: none;
            font-size: 14px;
            font-weight: 500;
            color: #6b7280;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .preview-mode-btn.active {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        
        .zoom-controls {
            display: flex;
            gap: 10px;
            align-items: center;
            background: white;
            padding: 8px 12px;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        
        .zoom-btn {
            padding: 6px 12px;
            background: #f3f4f6;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            font-size: 13px;
            color: #374151;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .zoom-btn:hover {
            background: #e5e7eb;
        }
        
        .zoom-btn.active {
            background: #667eea;
            color: white;
            border-color: #667eea;
        }
        
        .zoom-value {
            font-size: 13px;
            color: #6b7280;
            min-width: 50px;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>📸 Template Preview Tool</h1>
            <p>Test and preview HTML templates with live rendering</p>
        </div>
        
        <div class="main">
            <div class="sidebar">
                <form id="previewForm">
                    <div class="section">
                        <div class="section-title">Template Selection</div>
                        
                        <div class="form-group">
                            <label>Template <span class="template-badge">{{templates.length}} available</span></label>
                            <select id="templateName" onchange="loadPresetData()">
                                <option value="">-- Select Template --</option>
                                {{#each templates}}
                                <option value="{{this.name}}">{{this.displayName}}</option>
                                {{/each}}
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label>Size Preset</label>
                            <select id="sizePreset">
                                <option value="">-- Custom Size --</option>
                                {{#each sizes}}
                                <option value="{{@key}}">{{this.displayName}} ({{this.width}}×{{this.height}})</option>
                                {{/each}}
                            </select>
                        </div>
                    </div>
                    
                    <div class="section">
                        <div class="section-title">Content</div>
                        
                        <div class="form-group">
                            <label>Title</label>
                            <input type="text" id="title" placeholder="Enter main title">
                        </div>
                        
                        <div class="form-group">
                            <label>Subtitle</label>
                            <input type="text" id="subtitle" placeholder="Enter subtitle (optional)">
                        </div>
                        
                        <div class="form-group">
                            <label>Content</label>
                            <textarea id="content" placeholder="Enter content text&#10;Use \n for line breaks"></textarea>
                            <div class="help-text">Use \n for line breaks</div>
                        </div>
                        
                        <div class="preset-buttons">
                            <button type="button" class="preset-btn" onclick="loadPreset('tech')">Tech News</button>
                            <button type="button" class="preset-btn" onclick="loadPreset('product')">Product Launch</button>
                            <button type="button" class="preset-btn" onclick="loadPreset('event')">Event</button>
                            <button type="button" class="preset-btn" onclick="loadPreset('quote')">Quote</button>
                        </div>
                        
                        <div class="switch-group" style="margin-top: 20px;">
                            <span class="switch-label">Show Header</span>
                            <label class="switch">
                                <input type="checkbox" id="showHeader">
                                <span class="slider"></span>
                            </label>
                        </div>
                        
                        <div class="switch-group">
                            <span class="switch-label">Show Footer</span>
                            <label class="switch">
                                <input type="checkbox" id="showFooter">
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>
                    
                    <div class="section advanced-options">
                        <div class="section-title">Advanced Options</div>
                        
                        <div class="row">
                            <div class="form-group">
                                <label>Format</label>
                                <select id="format">
                                    <option value="png">PNG</option>
                                    <option value="jpeg">JPEG</option>
                                    <option value="webp">WebP</option>
                                </select>
                            </div>
                            
                            <div class="form-group">
                                <label>Quality</label>
                                <input type="number" id="quality" min="1" max="100" value="90">
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="form-group">
                                <label>Width (px)</label>
                                <input type="number" id="width" min="1" max="4000" placeholder="Auto">
                            </div>
                            
                            <div class="form-group">
                                <label>Height (px)</label>
                                <input type="number" id="height" min="1" max="4000" placeholder="Auto">
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label>DPR (Device Pixel Ratio)</label>
                            <input type="number" id="dpr" min="0.5" max="4" step="0.5" value="1">
                        </div>
                    </div>
                    
                    <button type="submit" class="btn-primary">Generate Preview</button>
                </form>
            </div>
            
            <div class="preview-area">
                <div class="preview-mode-toggle">
                    <button class="preview-mode-btn active" onclick="setPreviewMode('image')">Image Preview</button>
                    <button class="preview-mode-btn" onclick="setPreviewMode('html')">HTML Preview</button>
                </div>
                
                <div class="preview-header" style="display: none;">
                    <div class="preview-info" id="imagePreviewInfo" style="display: none;">
                        <span>📐 <span id="previewSize">-</span></span>
                        <span>📄 <span id="previewFormat">-</span></span>
                        <span>🎯 <span id="previewDpr">-</span></span>
                    </div>
                    <div class="zoom-controls" id="zoomControls" style="display: none;">
                        <button class="zoom-btn" onclick="setZoom('fit')">Fit to Window</button>
                        <button class="zoom-btn" onclick="setZoom('50')">50%</button>
                        <button class="zoom-btn" onclick="setZoom('75')">75%</button>
                        <button class="zoom-btn active" onclick="setZoom('100')">100%</button>
                        <button class="zoom-btn" onclick="setZoom('150')">150%</button>
                        <span class="zoom-value" id="zoomValue">100%</span>
                    </div>
                </div>
                
                <div id="emptyState" class="empty-state">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
                        <circle cx="8.5" cy="8.5" r="1.5"></circle>
                        <polyline points="21 15 16 10 5 21"></polyline>
                    </svg>
                    <p>Select a template and click "Generate Preview" to see the result</p>
                </div>
                
                <div id="loading" class="loading">
                    <div class="spinner"></div>
                    <p style="margin-top: 20px; color: #6b7280;">Generating preview...</p>
                </div>
                
                <div id="htmlPreviewContainer" class="preview-container" style="display: none;">
                    <div class="iframe-wrapper" id="iframeWrapper">
                        <iframe id="htmlPreview" class="preview-iframe"></iframe>
                    </div>
                </div>
                
                <div id="previewContainer" class="preview-container" style="display: none;">
                    <img id="previewImage" class="preview-image" alt="Template Preview">
                </div>
            </div>
        </div>
    </div>
    
    <script>
        let currentPreviewMode = 'image';
        let currentZoom = 100;
        let htmlContent = null;
        let imageUrl = null;
        let templateSize = { width: 1080, height: 1440 };
        
        function setZoom(value) {
            const wrapper = document.getElementById('iframeWrapper');
            const container = document.getElementById('htmlPreviewContainer');
            const iframe = document.getElementById('htmlPreview');
            
            if (value === 'fit') {
                // Calculate scale to fit
                const containerWidth = container.clientWidth - 80; // Account for padding
                const containerHeight = container.clientHeight - 80;
                const scaleX = containerWidth / templateSize.width;
                const scaleY = containerHeight / templateSize.height;
                currentZoom = Math.min(scaleX, scaleY) * 100;
            } else {
                currentZoom = parseInt(value);
            }
            
            const scale = currentZoom / 100;
            wrapper.style.transform = `scale(${scale})`;
            wrapper.style.width = templateSize.width + 'px';
            wrapper.style.height = templateSize.height + 'px';
            iframe.style.width = templateSize.width + 'px';
            iframe.style.height = templateSize.height + 'px';
            
            // Update UI
            document.getElementById('zoomValue').textContent = Math.round(currentZoom) + '%';
            document.querySelectorAll('.zoom-btn').forEach(btn => {
                btn.classList.remove('active');
                if (btn.textContent.includes(value === 'fit' ? 'Fit' : value + '%')) {
                    btn.classList.add('active');
                }
            });
        }
        
        function setPreviewMode(mode) {
            currentPreviewMode = mode;
            document.querySelectorAll('.preview-mode-btn').forEach(btn => {
                btn.classList.toggle('active', btn.textContent.toLowerCase().includes(mode));
            });
            
            const imageContainer = document.getElementById('previewContainer');
            const htmlContainer = document.getElementById('htmlPreviewContainer');
            const emptyState = document.getElementById('emptyState');
            const imageInfo = document.getElementById('imagePreviewInfo');
            const zoomControls = document.getElementById('zoomControls');
            
            if (mode === 'html') {
                imageContainer.style.display = 'none';
                imageInfo.style.display = 'none';
                zoomControls.style.display = htmlContent ? 'flex' : 'none';
                
                if (htmlContent) {
                    htmlContainer.style.display = 'flex';
                    emptyState.style.display = 'none';
                    document.querySelector('.preview-header').style.display = 'flex';
                    // Auto fit on first show
                    setTimeout(() => setZoom('fit'), 100);
                } else {
                    htmlContainer.style.display = 'none';
                    emptyState.style.display = 'block';
                    document.querySelector('.preview-header').style.display = 'none';
                }
            } else {
                htmlContainer.style.display = 'none';
                zoomControls.style.display = 'none';
                imageInfo.style.display = imageUrl ? 'inline-flex' : 'none';
                
                if (imageUrl) {
                    imageContainer.style.display = 'block';
                    emptyState.style.display = 'none';
                    document.querySelector('.preview-header').style.display = 'flex';
                } else {
                    imageContainer.style.display = 'none';
                    emptyState.style.display = 'block';
                    document.querySelector('.preview-header').style.display = 'none';
                }
            }
        }
        
        // Template preset data - dynamically loaded from server
        const templatesData = {{{templatesJSON}}};
        const sizesData = {{{sizesJSON}}};
        
        const presetData = {
            'simple-card': {
                tech: {
                    title: 'AI Revolution 2024',
                    subtitle: 'The Future is Now',
                    content: 'Artificial Intelligence is transforming every industry.\nFrom healthcare to finance, AI is creating new possibilities.'
                },
                product: {
                    title: 'Product Launch',
                    subtitle: 'Introducing Our Latest Innovation',
                    content: 'Experience the next generation of technology.\nDesigned for the future, available today.'
                },
                event: {
                    title: 'Tech Summit 2024',
                    subtitle: 'Join Us for 3 Days of Innovation',
                    content: 'Connect with industry leaders.\nLearn from the best.\nShape the future together.'
                },
                quote: {
                    title: 'Words of Wisdom',
                    subtitle: '',
                    content: '"The best way to predict the future is to invent it."\n- Alan Kay'
                }
            },
            'rednote-dark': {
                tech: {
                    title: 'GPT-5即将发布',
                    subtitle: 'OpenAI最新突破将彻底改变人工智能格局',
                    content: '据可靠消息，OpenAI计划在本季度发布GPT-5。\n新模型在推理能力、多模态理解和实时交互方面都有显著提升。\n业内专家认为，GPT-5的发布将加速AI在各行业的应用落地。'
                },
                product: {
                    title: 'iPhone 16 Pro发布',
                    subtitle: '苹果带来革命性AI功能',
                    content: '全新A18 Pro芯片，性能提升40%。\n搭载先进的AI摄影系统，让每一张照片都是大片。\n续航时间增加30%，支持更快的充电速度。'
                },
                event: {
                    title: '2024世界人工智能大会',
                    subtitle: '全球AI领袖齐聚上海',
                    content: '7月4日-6日，上海世博中心。\n超过500位演讲嘉宾，100+展商参展。\n探讨AI治理、大模型应用、智能制造等热点话题。'
                },
                quote: {
                    title: '马斯克谈AI未来',
                    subtitle: '',
                    content: '"AI将是人类面临的最大挑战，也是最大的机遇。"\n"我们需要确保AI的发展方向与人类利益一致。"\n- Elon Musk, 2024'
                }
            },
            'rednote-light': {
                tech: {
                    title: 'GPT-5即将发布',
                    subtitle: 'OpenAI最新突破将彻底改变人工智能格局',
                    content: '据可靠消息，OpenAI计划在本季度发布GPT-5。\n新模型在推理能力、多模态理解和实时交互方面都有显著提升。\n业内专家认为，GPT-5的发布将加速AI在各行业的应用落地。'
                },
                product: {
                    title: 'iPhone 16 Pro发布',
                    subtitle: '苹果带来革命性AI功能',
                    content: '全新A18 Pro芯片，性能提升40%。\n搭载先进的AI摄影系统，让每一张照片都是大片。\n续航时间增加30%，支持更快的充电速度。'
                },
                event: {
                    title: '2024世界人工智能大会',
                    subtitle: '全球AI领袖齐聚上海',
                    content: '7月4日-6日，上海世博中心。\n超过500位演讲嘉宾，100+展商参展。\n探讨AI治理、大模型应用、智能制造等热点话题。'
                },
                quote: {
                    title: '马斯克谈AI未来',
                    subtitle: '',
                    content: '"AI将是人类面临的最大挑战，也是最大的机遇。"\n"我们需要确保AI的发展方向与人类利益一致。"\n- Elon Musk, 2024'
                }
            }
        };
        
        // Merge server preset data with local preset data
        Object.keys(templatesData).forEach(templateName => {
            if (!presetData[templateName] && templatesData[templateName].presets) {
                presetData[templateName] = templatesData[templateName].presets;
            }
        });
        
        function loadPresetData() {
            const templateName = document.getElementById('templateName').value;
            if (templateName) {
                // Auto-select appropriate size preset based on template metadata
                const templateInfo = templatesData[templateName];
                if (templateInfo && templateInfo.defaultSize) {
                    document.getElementById('sizePreset').value = templateInfo.defaultSize;
                } else if (templateName.startsWith('rednote-')) {
                    document.getElementById('sizePreset').value = 'rednote_1080x1440';
                } else if (templateName === 'simple-card') {
                    document.getElementById('sizePreset').value = 'twitter_card';
                }
                
                // Load first preset data
                if (presetData[templateName]) {
                    loadPreset('tech');
                }
            }
        }
        
        function loadPreset(presetName) {
            const templateName = document.getElementById('templateName').value;
            if (!templateName || !presetData[templateName] || !presetData[templateName][presetName]) {
                return;
            }
            
            const data = presetData[templateName][presetName];
            document.getElementById('title').value = data.title || '';
            document.getElementById('subtitle').value = data.subtitle || '';
            document.getElementById('content').value = data.content || '';
            
            // Update active button
            document.querySelectorAll('.preset-btn').forEach(btn => {
                btn.classList.remove('active');
                if (btn.textContent.toLowerCase().includes(presetName)) {
                    btn.classList.add('active');
                }
            });
        }
        
        document.getElementById('previewForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = {
                templateName: document.getElementById('templateName').value,
                templateData: {
                    title: document.getElementById('title').value,
                    subtitle: document.getElementById('subtitle').value,
                    content: document.getElementById('content').value,
                    showHeader: document.getElementById('showHeader').checked,
                    showFooter: document.getElementById('showFooter').checked
                },
                format: document.getElementById('format').value,
                quality: parseInt(document.getElementById('quality').value),
                dpr: parseFloat(document.getElementById('dpr').value)
            };
            
            // Add size preset or custom size
            const sizePreset = document.getElementById('sizePreset').value;
            if (sizePreset) {
                formData.sizePreset = sizePreset;
                // Update template size for zoom
                if (sizesData[sizePreset]) {
                    templateSize.width = sizesData[sizePreset].width;
                    templateSize.height = sizesData[sizePreset].height;
                }
            } else {
                const width = document.getElementById('width').value;
                const height = document.getElementById('height').value;
                if (width) {
                    formData.width = parseInt(width);
                    templateSize.width = parseInt(width);
                }
                if (height) {
                    formData.height = parseInt(height);
                    templateSize.height = parseInt(height);
                }
            }
            
            
            // Show loading
            document.getElementById('emptyState').style.display = 'none';
            document.getElementById('previewContainer').style.display = 'none';
            document.getElementById('htmlPreviewContainer').style.display = 'none';
            document.getElementById('loading').classList.add('active');
            document.querySelector('.preview-header').style.display = 'none';
            
            // Generate both image and HTML simultaneously
            const promises = [];
            
            // Image generation
            promises.push(
                fetch('/render', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formData)
                }).then(async response => {
                    if (!response.ok) {
                        const error = await response.json();
                        throw new Error(error.error || 'HTTP error! status: ' + response.status);
                    }
                    const blob = await response.blob();
                    imageUrl = URL.createObjectURL(blob);
                    
                    // Create new image to get dimensions
                    const img = new Image();
                    img.onload = function() {
                        document.getElementById('previewSize').textContent = this.naturalWidth + '×' + this.naturalHeight;
                        document.getElementById('previewFormat').textContent = formData.format.toUpperCase();
                        document.getElementById('previewDpr').textContent = formData.dpr + 'x';
                    };
                    img.src = imageUrl;
                    document.getElementById('previewImage').src = imageUrl;
                }).catch(err => {
                    console.warn('Image generation failed:', err);
                    // Don't fail the whole operation if image fails
                })
            );
            
            // HTML generation
            promises.push(
                fetch('/render-html', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        templateName: formData.templateName,
                        templateData: formData.templateData
                    })
                }).then(async response => {
                    if (!response.ok) {
                        let errorMsg = 'HTML render error! status: ' + response.status;
                        try {
                            const error = await response.json();
                            errorMsg = error.error || errorMsg;
                        } catch (e) {
                            // If response is not JSON, use default error message
                        }
                        throw new Error(errorMsg);
                    }
                    const html = await response.text();
                    htmlContent = html;
                    
                    const iframe = document.getElementById('htmlPreview');
                    const blob = new Blob([html], { type: 'text/html' });
                    const url = URL.createObjectURL(blob);
                    iframe.src = url;
                }).catch(err => {
                    console.warn('HTML generation failed:', err);
                    // Don't fail the whole operation if HTML fails
                })
            );
            
            try {
                await Promise.all(promises);
                
                // Show current mode preview
                document.getElementById('loading').classList.remove('active');
                setPreviewMode(currentPreviewMode);
                
            } catch (error) {
                console.error('Error:', error);
                alert('Failed to generate preview: ' + error.message);
                document.getElementById('loading').classList.remove('active');
                document.getElementById('emptyState').style.display = 'block';
            }
        });
        
        // Size preset change handler
        document.getElementById('sizePreset').addEventListener('change', (e) => {
            if (e.target.value) {
                document.getElementById('width').value = '';
                document.getElementById('height').value = '';
                document.getElementById('width').disabled = true;
                document.getElementById('height').disabled = true;
            } else {
                document.getElementById('width').disabled = false;
                document.getElementById('height').disabled = false;
            }
        });
    </script>
</body>
</html>