<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{name}} - HTML to Image Service</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'PingFang SC', 'Helvetica Neue', sans-serif;
            line-height: 1.6;
            color: #333;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 40px 20px;
        }
        
        .header {
            background: white;
            border-radius: 16px;
            padding: 40px;
            margin-bottom: 30px;
            box-shadow: 0 10px 40px rgba(0,0,0,0.1);
        }
        
        .header h1 {
            font-size: 36px;
            color: #667eea;
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            gap: 15px;
        }
        
        .version-badge {
            font-size: 14px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 4px 12px;
            border-radius: 20px;
            font-weight: normal;
        }
        
        .header p {
            color: #666;
            font-size: 18px;
            margin-bottom: 20px;
        }
        
        .meta-info {
            display: flex;
            gap: 20px;
            flex-wrap: wrap;
            padding-top: 20px;
            border-top: 1px solid #eee;
        }
        
        .meta-item {
            display: flex;
            align-items: center;
            gap: 8px;
            color: #666;
            font-size: 14px;
        }
        
        .meta-item svg {
            width: 16px;
            height: 16px;
            fill: #667eea;
        }
        
        .nav-links {
            display: flex;
            gap: 20px;
            margin-top: 20px;
        }
        
        .nav-link {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            padding: 10px 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            text-decoration: none;
            border-radius: 8px;
            transition: transform 0.2s, box-shadow 0.2s;
        }
        
        .nav-link:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
        }
        
        .nav-link.secondary {
            background: white;
            color: #667eea;
            border: 2px solid #667eea;
        }
        
        .content-card {
            background: white;
            border-radius: 16px;
            padding: 30px;
            margin-bottom: 20px;
            box-shadow: 0 10px 40px rgba(0,0,0,0.1);
        }
        
        .content-card h2 {
            color: #333;
            margin-bottom: 20px;
            font-size: 24px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .content-card h3 {
            color: #555;
            margin: 20px 0 10px;
            font-size: 18px;
        }
        
        .feature-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        
        .feature-item {
            padding: 20px;
            background: #f8f9fa;
            border-radius: 12px;
            border-left: 4px solid #667eea;
        }
        
        .feature-item h4 {
            color: #333;
            margin-bottom: 8px;
            font-size: 16px;
        }
        
        .feature-item p {
            color: #666;
            font-size: 14px;
        }
        
        .code-example {
            background: #1e1e1e;
            color: #d4d4d4;
            padding: 20px;
            border-radius: 8px;
            overflow-x: auto;
            margin: 15px 0;
            font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
            font-size: 14px;
            line-height: 1.5;
            position: relative;
        }
        
        .code-example pre {
            margin: 0;
            white-space: pre;
        }
        
        .lang-badge {
            position: absolute;
            top: 10px;
            right: 10px;
            background: rgba(255,255,255,0.1);
            color: #999;
            padding: 2px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
        }
        
        .code-comment {
            color: #6A9955;
        }
        
        .code-string {
            color: #CE9178;
        }
        
        .code-keyword {
            color: #569CD6;
        }
        
        .code-function {
            color: #DCDCAA;
        }
        
        .endpoints-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        
        .endpoints-table th {
            background: #f8f9fa;
            padding: 12px;
            text-align: left;
            font-weight: 600;
            color: #333;
            border-bottom: 2px solid #dee2e6;
        }
        
        .endpoints-table td {
            padding: 12px;
            border-bottom: 1px solid #dee2e6;
        }
        
        .method-badge {
            display: inline-block;
            padding: 2px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: 600;
            font-family: monospace;
        }
        
        .method-badge.get {
            background: #28a745;
            color: white;
        }
        
        .method-badge.post {
            background: #007bff;
            color: white;
        }
        
        .endpoint-path {
            font-family: monospace;
            color: #495057;
            font-weight: 500;
        }
        
        .tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            border-bottom: 2px solid #e5e7eb;
        }
        
        .tab-button {
            padding: 10px 20px;
            background: transparent;
            border: none;
            color: #666;
            cursor: pointer;
            font-size: 16px;
            font-weight: 500;
            transition: all 0.2s;
            border-bottom: 2px solid transparent;
            margin-bottom: -2px;
        }
        
        .tab-button.active {
            color: #667eea;
            border-bottom-color: #667eea;
        }
        
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
        }
        
        .template-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }
        
        .template-item {
            padding: 15px;
            background: #f8f9fa;
            border-radius: 8px;
            text-align: center;
            font-weight: 500;
            color: #333;
        }
        
        .size-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }
        
        .size-item {
            padding: 15px;
            background: #f8f9fa;
            border-radius: 8px;
        }
        
        .size-item strong {
            color: #333;
            display: block;
            margin-bottom: 5px;
        }
        
        .size-item span {
            color: #666;
            font-size: 14px;
            font-family: monospace;
        }
        
        .footer {
            text-align: center;
            color: white;
            margin-top: 40px;
            padding: 20px;
        }
        
        .footer a {
            color: white;
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>
                📸 {{name}}
                <span class="version-badge">v{{version}}</span>
            </h1>
            <p>{{description}}</p>
            
            <div class="meta-info">
                <div class="meta-item">
                    <svg viewBox="0 0 24 24"><path d="M12 2L2 7v10c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V7l-10-5z"/></svg>
                    <span>License: {{license}}</span>
                </div>
                <div class="meta-item">
                    <svg viewBox="0 0 24 24"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/></svg>
                    <span>Status: Active</span>
                </div>
                <div class="meta-item">
                    <svg viewBox="0 0 24 24"><path d="M9.4 16.6L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4z"/></svg>
                    <span>Powered by DarkhorseOne Ltd.</span>
                </div>
            </div>
            
            <div class="nav-links">
                <a href="api-docs" class="nav-link">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="white"><path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"/></svg>
                    API Documentation
                </a>
                <a href="preview" class="nav-link secondary">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="#667eea"><path d="M12 9a3 3 0 0 0-3 3 3 3 0 0 0 3 3 3 3 0 0 0 3-3 3 3 0 0 0-3-3m0 8a5 5 0 0 1-5-5 5 5 0 0 1 5-5 5 5 0 0 1 5 5 5 5 0 0 1-5 5m0-12.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5z"/></svg>
                    Template Preview
                </a>
            </div>
        </div>
        
        <div class="content-card">
            <h2>
                <svg width="24" height="24" viewBox="0 0 24 24" fill="#667eea"><path d="M11.5,1L2,6V8H21V6M16.53,8.11L6.47,8.11L12,5.5L17.53,8.11M2,22H21V19H2M10,9V18H14V9H10M2,10V21H4V10M20,10V21H22V10H20Z"/></svg>
                Features
            </h2>
            <div class="feature-grid">
                <div class="feature-item">
                    <h4>🎨 Multiple Templates</h4>
                    <p>Built-in templates including simple-card, rednote-dark, and rednote-light</p>
                </div>
                <div class="feature-item">
                    <h4>📐 Preset Sizes</h4>
                    <p>Predefined sizes for social media platforms: Twitter, Instagram, Facebook, etc.</p>
                </div>
                <div class="feature-item">
                    <h4>🖼️ Multiple Formats</h4>
                    <p>Support for PNG, JPEG, and WebP image formats</p>
                </div>
                <div class="feature-item">
                    <h4>🔍 High DPI Support</h4>
                    <p>Device pixel ratio (DPR) support for crisp images on retina displays</p>
                </div>
                <div class="feature-item">
                    <h4>⚡ Fast Rendering</h4>
                    <p>Powered by Playwright for efficient and reliable rendering</p>
                </div>
                <div class="feature-item">
                    <h4>🛡️ Secure</h4>
                    <p>Sandboxed rendering with network isolation and CSP protection</p>
                </div>
            </div>
        </div>
        
        <div class="content-card">
            <h2>
                <svg width="24" height="24" viewBox="0 0 24 24" fill="#667eea"><path d="M6.5 10C7.47 10 8.37 10.3 9.11 10.81L7.5 14.39C7.35 14.36 7.19 14.34 7 14.34C5.62 14.34 4.5 15.46 4.5 16.84S5.62 19.34 7 19.34C7.82 19.34 8.54 18.91 8.93 18.26L10.54 21.84C9.77 22.26 8.88 22.5 7.94 22.5C5.28 22.5 2.87 20.66 2.13 18.12C1.66 16.5 1.89 14.79 2.76 13.36C3.63 11.92 5.04 10.94 6.65 10.64C6.59 10.43 6.54 10.22 6.5 10M15.84 3.16C17.32 2.27 19.14 2 20.87 2.5C23.14 3.17 24.82 4.84 25.5 7.11C26 8.84 25.73 10.66 24.84 12.14C23.95 13.62 22.54 14.6 20.93 14.9C20.99 15.11 21.04 15.33 21.08 15.54C20.24 15.77 19.36 16.14 18.54 16.64L20.15 13.06C20.3 13.09 20.46 13.11 20.65 13.11C22.03 13.11 23.15 11.99 23.15 10.61S22.03 8.11 20.65 8.11C19.83 8.11 19.11 8.54 18.72 9.19L17.11 5.61C17.88 5.19 18.77 4.95 19.71 4.95C20.06 4.95 20.4 5 20.73 5.04C20.7 4.74 20.68 4.44 20.68 4.14L20.67 3.89C20.62 3.64 20.58 3.4 20.53 3.16M11.29 8.5C10.27 8.5 9.3 8.74 8.43 9.16L10.04 12.74C10.43 12.09 11.15 11.66 11.97 11.66C13.35 11.66 14.47 12.78 14.47 14.16S13.35 16.66 11.97 16.66C11.8 16.66 11.64 16.64 11.5 16.61L9.88 20.19C10.35 20.3 10.83 20.37 11.33 20.37C11.68 20.37 12.03 20.33 12.36 20.26C12.3 20.5 12.26 20.75 12.23 21C13.39 20.64 14.63 20.46 15.86 20.5C16.42 19.13 16.42 17.6 15.86 16.23C15.3 14.86 14.24 13.77 12.89 13.19C12.96 12.79 13 12.38 13 11.97C13 10.74 12.5 9.63 11.69 8.81L11.35 8.56L11.29 8.5Z"/></svg>
                API Endpoints
            </h2>
            <table class="endpoints-table">
                <thead>
                    <tr>
                        <th>Method</th>
                        <th>Endpoint</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td><span class="method-badge get">GET</span></td>
                        <td><span class="endpoint-path">/</span></td>
                        <td>Service homepage (this page)</td>
                    </tr>
                    <tr>
                        <td><span class="method-badge get">GET</span></td>
                        <td><span class="endpoint-path">/api-docs</span></td>
                        <td>Interactive Swagger API documentation</td>
                    </tr>
                    <tr>
                        <td><span class="method-badge get">GET</span></td>
                        <td><span class="endpoint-path">/preview</span></td>
                        <td>Template preview and testing UI</td>
                    </tr>
                    <tr>
                        <td><span class="method-badge post">POST</span></td>
                        <td><span class="endpoint-path">/render</span></td>
                        <td>Convert HTML/template to image</td>
                    </tr>
                    <tr>
                        <td><span class="method-badge post">POST</span></td>
                        <td><span class="endpoint-path">/render-html</span></td>
                        <td>Render template to HTML</td>
                    </tr>
                    <tr>
                        <td><span class="method-badge get">GET</span></td>
                        <td><span class="endpoint-path">/presets</span></td>
                        <td>Get available size and clip presets</td>
                    </tr>
                    <tr>
                        <td><span class="method-badge get">GET</span></td>
                        <td><span class="endpoint-path">/healthz</span></td>
                        <td>Health check endpoint</td>
                    </tr>
                </tbody>
            </table>
        </div>
        
        <div class="content-card">
            <h2>
                <svg width="24" height="24" viewBox="0 0 24 24" fill="#667eea"><path d="M14.6,16.6L19.2,12L14.6,7.4L16,6L22,12L16,18L14.6,16.6M9.4,16.6L4.8,12L9.4,7.4L8,6L2,12L8,18L9.4,16.6Z"/></svg>
                Usage Examples
            </h2>
            
            <div class="tabs">
                <button class="tab-button active" onclick="showTab('curl')">cURL</button>
                <button class="tab-button" onclick="showTab('nodejs')">Node.js</button>
                <button class="tab-button" onclick="showTab('python')">Python</button>
            </div>
            
            <div id="curl" class="tab-content active">
                <h3>Basic Image Generation</h3>
                <div class="code-example">
                    <span class="lang-badge">bash</span>
                    <pre><span class="code-comment"># Generate image from template</span>
curl -X POST {{baseUrl}}/render \
  -H "Content-Type: application/json" \
  -d '{
    "templateName": "simple-card",
    "templateData": {
      "title": "Hello World",
      "subtitle": "Welcome to HTML to Image Service",
      "content": "This is a test content"
    },
    "format": "png",
    "sizePreset": "twitter_card"
  }' \
  --output image.png</pre>
                </div>
                
                <h3>Custom HTML Rendering</h3>
                <div class="code-example">
                    <span class="lang-badge">bash</span>
                    <pre><span class="code-comment"># Generate image from custom HTML</span>
curl -X POST {{baseUrl}}/render \
  -H "Content-Type: application/json" \
  -d '{
    "html": "&lt;html&gt;&lt;body&gt;&lt;h1&gt;Custom HTML&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;",
    "width": 1200,
    "height": 630,
    "format": "jpeg",
    "quality": 90
  }' \
  --output custom.jpg</pre>
                </div>
            </div>
            
            <div id="nodejs" class="tab-content">
                <h3>Installation</h3>
                <div class="code-example">
                    <span class="lang-badge">bash</span>
                    <pre>npm install axios</pre>
                </div>
                
                <h3>Basic Usage</h3>
                <div class="code-example">
                    <span class="lang-badge">javascript</span>
                    <pre><span class="code-keyword">const</span> <span class="code-function">axios</span> = <span class="code-keyword">require</span>(<span class="code-string">'axios'</span>);
<span class="code-keyword">const</span> <span class="code-function">fs</span> = <span class="code-keyword">require</span>(<span class="code-string">'fs'</span>);

<span class="code-comment">// Generate image from template</span>
<span class="code-keyword">async function</span> <span class="code-function">generateImage</span>() {
  <span class="code-keyword">try</span> {
    <span class="code-keyword">const</span> response = <span class="code-keyword">await</span> axios.post(<span class="code-string">'{{baseUrl}}/render'</span>, {
      templateName: <span class="code-string">'simple-card'</span>,
      templateData: {
        title: <span class="code-string">'Hello from Node.js'</span>,
        subtitle: <span class="code-string">'Generating images programmatically'</span>,
        content: <span class="code-string">'This image was generated using Node.js'</span>
      },
      format: <span class="code-string">'png'</span>,
      sizePreset: <span class="code-string">'twitter_card'</span>,
      dpr: 2  <span class="code-comment">// For retina displays</span>
    }, {
      responseType: <span class="code-string">'arraybuffer'</span>
    });
    
    <span class="code-comment">// Save the image</span>
    fs.writeFileSync(<span class="code-string">'output.png'</span>, response.data);
    console.log(<span class="code-string">'Image saved as output.png'</span>);
  } <span class="code-keyword">catch</span> (error) {
    console.error(<span class="code-string">'Error:'</span>, error.message);
  }
}

<span class="code-function">generateImage</span>();</pre>
                </div>
                
                <h3>Advanced Example with Custom HTML</h3>
                <div class="code-example">
                    <span class="lang-badge">javascript</span>
                    <pre><span class="code-keyword">const</span> <span class="code-function">axios</span> = <span class="code-keyword">require</span>(<span class="code-string">'axios'</span>);
<span class="code-keyword">const</span> <span class="code-function">fs</span> = <span class="code-keyword">require</span>(<span class="code-string">'fs'</span>);

<span class="code-keyword">async function</span> <span class="code-function">generateCustomImage</span>() {
  <span class="code-keyword">const</span> html = <span class="code-string">`
    &lt;html&gt;
      &lt;head&gt;
        &lt;style&gt;
          body {
            font-family: Arial, sans-serif;
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100vh;
            margin: 0;
          }
          h1 { font-size: 48px; }
        &lt;/style&gt;
      &lt;/head&gt;
      &lt;body&gt;
        &lt;h1&gt;Custom HTML Content&lt;/h1&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  `</span>;
  
  <span class="code-keyword">const</span> response = <span class="code-keyword">await</span> axios.post(<span class="code-string">'{{baseUrl}}/render'</span>, {
    html: html,
    width: 1920,
    height: 1080,
    format: <span class="code-string">'webp'</span>,
    quality: 95,
    fullPage: <span class="code-keyword">false</span>
  }, {
    responseType: <span class="code-string">'arraybuffer'</span>
  });
  
  fs.writeFileSync(<span class="code-string">'custom.webp'</span>, response.data);
}

<span class="code-function">generateCustomImage</span>();</pre>
                </div>
            </div>
            
            <div id="python" class="tab-content">
                <h3>Installation</h3>
                <div class="code-example">
                    <span class="lang-badge">bash</span>
                    <pre>pip install requests</pre>
                </div>
                
                <h3>Basic Usage</h3>
                <div class="code-example">
                    <span class="lang-badge">python</span>
                    <pre><span class="code-keyword">import</span> requests
<span class="code-keyword">import</span> json

<span class="code-comment"># Generate image from template</span>
<span class="code-keyword">def</span> <span class="code-function">generate_image</span>():
    url = <span class="code-string">'{{baseUrl}}/render'</span>
    
    payload = {
        <span class="code-string">'templateName'</span>: <span class="code-string">'simple-card'</span>,
        <span class="code-string">'templateData'</span>: {
            <span class="code-string">'title'</span>: <span class="code-string">'Hello from Python'</span>,
            <span class="code-string">'subtitle'</span>: <span class="code-string">'Generating images with Python'</span>,
            <span class="code-string">'content'</span>: <span class="code-string">'This image was generated using Python requests library'</span>
        },
        <span class="code-string">'format'</span>: <span class="code-string">'png'</span>,
        <span class="code-string">'sizePreset'</span>: <span class="code-string">'instagram_post'</span>,
        <span class="code-string">'dpr'</span>: 2
    }
    
    headers = {<span class="code-string">'Content-Type'</span>: <span class="code-string">'application/json'</span>}
    
    response = requests.post(url, json=payload, headers=headers)
    
    <span class="code-keyword">if</span> response.status_code == 200:
        <span class="code-keyword">with</span> open(<span class="code-string">'output.png'</span>, <span class="code-string">'wb'</span>) <span class="code-keyword">as</span> f:
            f.write(response.content)
        <span class="code-keyword">print</span>(<span class="code-string">'Image saved as output.png'</span>)
    <span class="code-keyword">else</span>:
        <span class="code-keyword">print</span>(<span class="code-string">f'Error: {response.status_code}'</span>)
        <span class="code-keyword">print</span>(response.text)

<span class="code-function">generate_image</span>()</pre>
                </div>
                
                <h3>Batch Processing Example</h3>
                <div class="code-example">
                    <span class="lang-badge">python</span>
                    <pre><span class="code-keyword">import</span> requests
<span class="code-keyword">import</span> asyncio
<span class="code-keyword">import</span> aiohttp

<span class="code-keyword">async def</span> <span class="code-function">generate_batch_images</span>():
    url = <span class="code-string">'{{baseUrl}}/render'</span>
    
    <span class="code-comment"># List of data to generate images for</span>
    items = [
        {<span class="code-string">'title'</span>: <span class="code-string">'Post 1'</span>, <span class="code-string">'content'</span>: <span class="code-string">'Content for post 1'</span>},
        {<span class="code-string">'title'</span>: <span class="code-string">'Post 2'</span>, <span class="code-string">'content'</span>: <span class="code-string">'Content for post 2'</span>},
        {<span class="code-string">'title'</span>: <span class="code-string">'Post 3'</span>, <span class="code-string">'content'</span>: <span class="code-string">'Content for post 3'</span>},
    ]
    
    <span class="code-keyword">async with</span> aiohttp.ClientSession() <span class="code-keyword">as</span> session:
        tasks = []
        <span class="code-keyword">for</span> i, item <span class="code-keyword">in</span> enumerate(items):
            payload = {
                <span class="code-string">'templateName'</span>: <span class="code-string">'rednote-dark'</span>,
                <span class="code-string">'templateData'</span>: item,
                <span class="code-string">'format'</span>: <span class="code-string">'jpeg'</span>,
                <span class="code-string">'quality'</span>: 85,
                <span class="code-string">'sizePreset'</span>: <span class="code-string">'instagram_story'</span>
            }
            task = session.post(url, json=payload)
            tasks.append((i, task))
        
        <span class="code-keyword">for</span> i, task <span class="code-keyword">in</span> tasks:
            <span class="code-keyword">async with</span> task <span class="code-keyword">as</span> response:
                <span class="code-keyword">if</span> response.status == 200:
                    content = <span class="code-keyword">await</span> response.read()
                    <span class="code-keyword">with</span> open(<span class="code-string">f'batch_image_{i}.jpg'</span>, <span class="code-string">'wb'</span>) <span class="code-keyword">as</span> f:
                        f.write(content)
                    <span class="code-keyword">print</span>(<span class="code-string">f'Saved batch_image_{i}.jpg'</span>)

<span class="code-comment"># Run the async function</span>
asyncio.run(<span class="code-function">generate_batch_images</span>())</pre>
                </div>
            </div>
        </div>
        
        <div class="content-card">
            <h2>
                <svg width="24" height="24" viewBox="0 0 24 24" fill="#667eea"><path d="M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4M12,6A6,6 0 0,0 6,12A6,6 0 0,0 12,18A6,6 0 0,0 18,12A6,6 0 0,0 12,6M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8Z"/></svg>
                Available Resources
            </h2>
            
            <h3>Templates</h3>
            <div class="template-list">
                {{#each templates}}
                <div class="template-item">{{this}}</div>
                {{/each}}
            </div>
            
            <h3>Size Presets</h3>
            <div class="size-list">
                {{#each sizes}}
                <div class="size-item">
                    <strong>{{@key}}</strong>
                    <span>{{this.width}} × {{this.height}}px</span>
                </div>
                {{/each}}
            </div>
        </div>
        
        <div class="footer">
            <p>&copy; 2023-2026 DarkhorseOne Ltd. | Licensed under {{license}}</p>
            <p>
                <a href="https://www.darkhorseone.co.uk" target="_blank">Visit DarkhorseOne Ltd.</a> |
                <a href="api-docs">API Documentation</a> |
                <a href="preview">Template Preview</a>
            </p>
        </div>
    </div>
    
    <script>
        function showTab(tabName) {
            // Hide all tabs
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            document.querySelectorAll('.tab-button').forEach(btn => {
                btn.classList.remove('active');
            });
            
            // Show selected tab
            document.getElementById(tabName).classList.add('active');
            event.target.classList.add('active');
        }
    </script>
</body>
</html>